<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4001/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4001/" rel="alternate" type="text/html" /><updated>2017-11-05T15:19:37-06:00</updated><id>http://localhost:4001/</id><title type="html">Jekyll Demo Site</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4001/jekyll/update/2017/11/05/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-11-05T14:36:22-06:00</published><updated>2017-11-05T14:36:22-06:00</updated><id>http://localhost:4001/jekyll/update/2017/11/05/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4001/jekyll/update/2017/11/05/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Title09</title><link href="http://localhost:4001/2016/11/02/title09.mmd" rel="alternate" type="text/html" title="Title09" /><published>2016-11-02T00:00:00-05:00</published><updated>2016-11-02T00:00:00-05:00</updated><id>http://localhost:4001/2016/11/02/title09</id><content type="html" xml:base="http://localhost:4001/2016/11/02/title09.mmd"># What I Have Done To Date.

1. Set up GitHub.
2. Written installer program that self updates.
3. Modified act so that it ignores whitespace.
4. Updated dig commands so that they do not hang on sand and gravel.

# Next Steps.

1. Write program &quot;run&quot; that will execute a script from a file.
2. Add ability to ignore white space and carriage returns to run. 
3. Will have to investigate feasibility of using &quot;\\&quot; in turtle terminal to write longer scripts
4. Add line comments. I will use the Lua form &quot;--&quot;.
4. Add block comments. Again I will use the Lua forms &quot;---[[&quot; and &quot;--]]&quot;.

# Next Big Step

1. Add macros. These can be used not only for reusable pieces of code but since I will be using Lua tables the same mechanism can be used as variables.
2. Add ability to call code from an external file. The question is what should the syntax for calling from a separate file. One possibility is just to have a single file with all of the callable macros in it that is read by default by the &quot;run&quot; program and and can be read with a switch by the &quot;do&quot; program.
2. Add a more flexible looping mechanism with conditionals.
3. Add expressions.
4. A more robust inspect command. This could allow a simple inventory management with turtles. 

# The Big Goals Are:
1. Resource acquisition. Yes, they will be able to autonomously shaft mine the world effectively harvesting every useful block in those chunks. 
1. Inventory management with turtles. They will autonomously keep everything sorted and processed. 
2. Crafting. Give them minimum levels of items to maintain and they will craft as necessary. They will even call the miners for more raw materials. 
2. Construction. They will build everything from a shack to the Taj Mahal. From domed cities to fusion reactors.</content><author><name></name></author><summary type="html"># What I Have Done To Date.</summary></entry><entry><title type="html">Title08</title><link href="http://localhost:4001/2016/10/30/title08.mmd" rel="alternate" type="text/html" title="Title08" /><published>2016-10-30T00:00:00-05:00</published><updated>2016-10-30T00:00:00-05:00</updated><id>http://localhost:4001/2016/10/30/title08</id><content type="html" xml:base="http://localhost:4001/2016/10/30/title08.mmd"># Next Goals

1. Implement a proper sleep function

```lua
local clock = os.clock
function sleep(n)  -- seconds
  local t0 = clock()
  while clock() - t0 &lt;= n do end
end
-- warning: clock can eventually wrap around for sufficiently large n
-- (whose value is platform dependent).  Even for n == 1, clock() - t0
-- might become negative on the second that clock wraps.
-- 
```

2. Add a &quot;Craft&quot; function
3. Write an Installer/Updater system.

Then the big stuff starrs:

4. Add variables.
5. Add Flow control:</content><author><name></name></author><summary type="html"># Next Goals</summary></entry><entry><title type="html">Title07</title><link href="http://localhost:4001/2016/10/22/title07.mmd" rel="alternate" type="text/html" title="Title07" /><published>2016-10-22T00:00:00-05:00</published><updated>2016-10-22T00:00:00-05:00</updated><id>http://localhost:4001/2016/10/22/title07</id><content type="html" xml:base="http://localhost:4001/2016/10/22/title07.mmd"></content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Title06</title><link href="http://localhost:4001/2016/10/19/title06.mmd" rel="alternate" type="text/html" title="Title06" /><published>2016-10-19T00:00:00-05:00</published><updated>2016-10-19T00:00:00-05:00</updated><id>http://localhost:4001/2016/10/19/title06</id><content type="html" xml:base="http://localhost:4001/2016/10/19/title06.mmd"># The ACT Language

The ACT script by McLeopold is a simple but extremely useful Aplication Specific Language (APL) for Minecraft turtles. It is terse with each command consisting of one or two characters. The commands are as follows:


The act mini-language is easy and mnemonic. An act string is a sequence of commands all smashed to together, similar to a regular expression. For example, to move the turtle forward 2, turn right and go forward 3 you would use this string: &quot;f2rf3&quot;.


Movement commands - these are 1 character in lower case. They can be followed by a number to specify how many times to move:

* f - forward
* b - back
* u - up
* d - down
* r - right
* l - left


Other commands - these commands are 1 character and can be followed by a number.

* s - select, the number the slot the will be selected (1-16)
* z - sleep (not a turtle command, but useful), the number is how many seconds to pause for
* R - refuel, the number following is how much of the current slot to consume, select the correct slot number first


Action Commands - Turtles can do many actions in three directions, forward, up and down. The following commands are all 2 characters where the second character is the direction (f-forward, u-up, d-down). The first character is upper case and the second is lower:

* D - dig (Df, Du, Dd)
* P - place (Pf, Pu, Pd)
* E - drop (E for eject) (Ef, Eu, Ed)
* A - attack (Af, Au, Ad)
* S - suck (Sf, Su, Sd)


Decision Commands - Turtles can detect blocks and compare blocks to their inventory. These commands 2 characters which are a symbol followed by a direction (f, u, d). These will stop the current action block from continuing:

* ? - detect (?f, ?u, ?d)
* = - compare (=f, =u, =d) (use the select command to pick the block to compare with first


Parenthesis


You can use parenthesis () to group some actions and repeat them. &quot;(Pfuf)5&quot; will build a staircase for you if your turtle has stairs in the selected slot. The turtle will place a block forward, move up, move forward, then repeat the process a total of 5 times. Parenthesis can be nested.


do is the command line interface. You can quickly give your turtle a few commands. For example, if your turtle is on top of a block and you'd like to move it below the block you can type the following:

```
do bd2f
```

The turtle will back up, move down 2 below the block, then move back forward under the block.


act is the api that you can use in your scripts. To do the same actions in a script, put the following in a file:


```lua
os.loadAPI(&quot;act&quot;)
act.act(&quot;bd2f&quot;)
```

Here is an example script to chop down a tree. After placing a turtle in front of a tree trunk, we want the turtle to chop (dig) the first log at the bottom, move underneath the trunk, then chop up to the top, then come back down. We'll repeat the dig up and move up commands as long as we detect a block above us. If the ?u (detectUp) fails, the action will skip out of the repeated loop and move on to going down 48. If the tree is not 48 blocks high, the turtle will move down to the ground, then fail to continue moving, which is good enough for us to retrieve it. (Unless there is a hole below the tree?)

```
do Dff(?uDuu)48d48
```

# Additions I Plan To Make

There are 4 additions ACT needs to become a full featured language.


1. Variables
2. Functions/Macros
3. Flow Control Structures
    1. Conditional Statements
    2. Comparison Operators
    3. Index Modifiers
    4. Loops
4. Comments


## Variables 

As much as possible I want to make things as brain dead simple to implement and use as possible. Variable assignments will take the form of


```
@foo@ =:10
(Du)@foo@
```

Will dig up ten times. Variable names can contain any alphanumeric, underscore, or hyphen. Names are case sensitive. If variables are called before being defined I don't know whether to print an error message and give them a default value (1 or 0)  and gracefully continue or abort with an error message. Gonna have to work out what the scope should be. There is probably good reason to have global (declared outside of functions/macros) and local (declared in functions/macros). Scoping should br automatic without keywords.


## Functions/Macros


These will take the form

```
%foo(@n@ @z@)% =: D@z@(Du)@n@
(%foo(5 u)%)10
```

This passes a table of parameters to the function. Also need to implement return values so you can have

```
%foo% =: @bar@+1
@bar@ =: 5
(Du)%foo%
```
will dig up 6 times
## Flow Control Structures

### Conditional Statements


The flow control structure will be

```
??(Conditional Statement)(True Block)(False Block)
```

Either the True Block or the False Block can be empty.

### Comparison Operators

==, !=, &gt;, &lt;, &lt;=, &gt;=

### Index Modifiers (Rejected)
&quot;++&quot;, &quot;--&quot;

++@foo@ will increment @foo@ before it is evaluated and @foo@++ will increment @foo@ after it is evaluated. There is one problem. I really want to use &quot;--&quot; for a line comment and --[[ and ]] for block comments. Hmmmm. Maybe I could use &quot;ic&quot; for increment and &quot;dc&quot; for decrement. Not as intuitive though. Or maybe hashs, &quot;##&quot;, and &quot;##[[&quot;&quot; and &quot;]]&quot;. Never mind. This is adding too much complexity. We will just do it the old fashioned way of modifying the index in the Loop Body.

### Loops

There are two forms, the pre loop form

```
((Conditional Statement)(Loop body))
```
In this form the Conditional Statement is evaluated and if true the Loop Body is executed.

and the post loop form.

```
((Loop Body)(Conditional Statement))
```
With this form the Loop Body is always executed at least once. The post loop form is strictly not necessary but is included for convienence, and may be removed and or never implemented as it is redundant.
## Comments
Will use the Lua style comments &quot;--&quot; doe line comments and  &quot;--[[&quot;, &quot;]]&quot; for block comments. This will allow the debugging technique of including or excluding code blocks by deleting or inserting a single &quot;-&quot; at the beginning of the &quot;--[[&quot;.

```lua
--[[
Code is excluded
--]]

---[[
Code is included
--]]
```

# Future Changes

## Communication Functions
Addition of communication functions so that accessing and controlling turtles remotely will be close to trivial. This will include peer to peer and boss-minion communicaiton. Will have to experiment with that some to see exactly how that should work. Perhaps these functions will start with &quot;C&quot;.

## GPS Functions
Functions to make it easy to use GPS. Make it brain dead simple to use by letting the program do not just all of theheavy lifting but all of the lifting. For example if a user calls &quot;Gg&quot;, for GPS get position, if the user has not set up GPS communication the program will do everything it can to initialize the GPS system before returning a position. If it gets conflicting data it will use the most consistant data and print a message tothe error log.

## Error Logging

Oh that's another thing, an error log. As much as possible the program will continue despite errors but it will log any unexpected occurances.</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Title04</title><link href="http://localhost:4001/2016/10/19/title04.mmd" rel="alternate" type="text/html" title="Title04" /><published>2016-10-19T00:00:00-05:00</published><updated>2016-10-19T00:00:00-05:00</updated><id>http://localhost:4001/2016/10/19/title04</id><content type="html" xml:base="http://localhost:4001/2016/10/19/title04.mmd"># Thoughts On Implementation
## Variables
 Variables can be implemented as a Lua table with the index being the variable string.

```lua
 global_variables={}
 global_variables[@foo@]=5
 global_variables[@bar@]=&quot;cobblestone&quot;
 ```

## Tokenizing
Parsing into tokens can be done at least partially by using tables as case statements. 

## Executing Loops and Complex Funcitons

In some cases it might be easier to have the program generate a string of commands and then execute that string with &quot;LoadString()&quot;.</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Title03</title><link href="http://localhost:4001/2016/08/12/title03.html" rel="alternate" type="text/html" title="Title03" /><published>2016-08-12T00:00:00-05:00</published><updated>2016-08-12T00:00:00-05:00</updated><id>http://localhost:4001/2016/08/12/title03</id><content type="html" xml:base="http://localhost:4001/2016/08/12/title03.html">&lt;h1 id=&quot;lua-idioms&quot;&gt;Lua Idioms&lt;/h1&gt;

&lt;h2 id=&quot;iolines-iterator&quot;&gt;io.lines iterator&lt;/h2&gt;
&lt;p&gt;From: https://www.lua.org/pil/21.1.html&lt;/p&gt;

&lt;p&gt;to iterate on a whole file line by line, we do better to use the io.lines iterator. For instance, we can write a complete program to sort the lines of a file as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- read the lines in table 'lines'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;io.lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- sort&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;table.sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- write all the lines&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ipairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;io.write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This program sorts a file with 4.5 MB (32K lines) in 1.8 seconds (on a Pentium 333MHz), against 0.6 seconds spent by the system sort program, which is written in C and highly optimized.&lt;/p&gt;

&lt;h2 id=&quot;other-iterators&quot;&gt;Other iterators.&lt;/h2&gt;
&lt;p&gt;From: http://lua-users.org/wiki/ForTutorial
The second form of the for loop has the syntax:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;explist&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;explist is evaluated once before the loop is entered. Its results are an iterator function (which sets the var values), a state (from which the values can be read), and an initial value (from which to iterate onwards).&lt;/p&gt;

&lt;h3 id=&quot;pairstable&quot;&gt;pairs(table)&lt;/h3&gt;

&lt;p&gt;Lua provides a pairs() function to create the explist information for us to iterate over a table. The pairs() function will allow iteration over key-value pairs. Note that the order that items are returned is not defined, not even for indexed tables.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14159&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;banana&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;yellow&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;ipairstable&quot;&gt;ipairs(table)&lt;/h3&gt;

&lt;p&gt;The ipairs() function will allow iteration over index-value pairs. These are key-value pairs where the keys are indices into an array. The order in which elements are returned is guaranteed to be in the numeric order of the indices, and non-integer keys are simply skipped. Using the same table as in the example above:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ipairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Notice how only the array part of the table is displayed because only these elements have index keys.&lt;/p&gt;

&lt;h3 id=&quot;next&quot;&gt;next()&lt;/h3&gt;

&lt;p&gt;The next(table [,index]) function helps iterate over a table. When given a table and an index it returns the next key-value pair from the table, e.g.,&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- index will be nil, the beginning&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14159&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As with pairs(), the order in which items are returned is not defined; index keys can be returned in any order, not just numerically increasing. The pairs() function returns an explist containing next() so we can iterate over tables. We can pass our own expression list to the for statement as follows:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14159&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;banana&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;yellow&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We pass next,table,nil as the expression list to the for statement. We are saying here that we want to use the iterator function next(), on the table t, starting at nil (the beginning). The for statement keeps executing until the next() function returns nil (the end of the table).&lt;/p&gt;

&lt;h3 id=&quot;iolines&quot;&gt;io.lines()&lt;/h3&gt;

&lt;p&gt;Lua provides other useful iterators, like io.lines([filename]) in the io library. We can demonstrate this by creating a custom file containing some lines of text.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;io.output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;io.open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;io.write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;This is\nsome sample text\nfor Lua.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;io.close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We created a file called “my.txt”, wrote three lines to it and closed it. Now we can read it using the io.lines iterator:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;io.lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lua&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;filelines&quot;&gt;file:lines()&lt;/h3&gt;

&lt;p&gt;The io library provides another way to iterate over lines of a text file.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;io.open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lua&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What are the differences with io.lines()?&lt;/p&gt;

&lt;p&gt;You have to explicitly open and close the file. One advantage of this is that if the file cannot be opened, you can handle this failure gracefully. Here, the assert has the same effect as io.lines: the interpreter stops with an error message pointing to the faulty line; but you can test for a nil value of file and do something else.&lt;/p&gt;

&lt;p&gt;Another advantage is that you can start the loop on any line:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;io.open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;list.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;string.sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ProcessLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- File doesn't start with a comment, process the first line&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- We could also loop on the first lines, while they are comment&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- Process the remainder of the file&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ProcessLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;custom-iterators&quot;&gt;Custom iterators&lt;/h3&gt;

&lt;p&gt;We can write our own iterators, similiar to next(), to iterate over any data sequence. This is covered in more detail in the IteratorsTutorial.&lt;/p&gt;</content><author><name></name></author><summary type="html">Lua Idioms</summary></entry><entry><title type="html">Title02</title><link href="http://localhost:4001/2016/08/12/title02.html" rel="alternate" type="text/html" title="Title02" /><published>2016-08-12T00:00:00-05:00</published><updated>2016-08-12T00:00:00-05:00</updated><id>http://localhost:4001/2016/08/12/title02</id><content type="html" xml:base="http://localhost:4001/2016/08/12/title02.html">&lt;h1 id=&quot;ides&quot;&gt;IDEs&lt;/h1&gt;

&lt;p&gt;There are several IDEs available for Lua on OS X. Since this is not a business that generates income I wanted a free, or at least low cost, IDE. I initially tried ZeroBrane which seemed to be a good IDE except that it didn’t have the (Emacs) cursor motion/selection keybindings I am use to. So why don’t I use Emacs? Emacs is a fantastic program but it is not really an editor, or an IDE. It is a lisp programming and execution environment that is frequently used as an editor. Many people use it productively but configuring it seems to be a black art that results in near infinite “bit twiddling”.&lt;/p&gt;

&lt;p&gt;Next I tried my goto editor Sublime Text. It is already good at editing files so I added three packages.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;REPLSublime - Runs a REPL for a selected language in a ST window.&lt;/li&gt;
  &lt;li&gt;Autocomplete - What the name says.&lt;/li&gt;
  &lt;li&gt;LuaExtended - Better syntax highlighting.&lt;/li&gt;
  &lt;li&gt;MonokaiExtended - Prettier syntax highlighting.&lt;/li&gt;
  &lt;li&gt;sublemacspro - Makes ST more Emacs awesome.&lt;/li&gt;
  &lt;li&gt;OrigamiEmacs - Better window control.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So far I am quite pleased with the results.&lt;/p&gt;</content><author><name></name></author><summary type="html">IDEs</summary></entry><entry><title type="html">1 Title01</title><link href="http://localhost:4001/2016/08/12/1-title01.mmd" rel="alternate" type="text/html" title="1 Title01" /><published>2016-08-12T00:00:00-05:00</published><updated>2016-08-12T00:00:00-05:00</updated><id>http://localhost:4001/2016/08/12/1-title01</id><content type="html" xml:base="http://localhost:4001/2016/08/12/1-title01.mmd">The purpose of this blog is to keep notes and document my efforts to create something cool in Minecraft. Namely TURTLE 
WORLD DOMINATION!!! Insert evil laugh here. Seriously. It is an attempt to make minecraft turtles easier to use. They are already quite powerful but to use them you have to write scripts that look like this.

```lua
if isRunning then
    if #tArgs &gt; 3 then
        for i=4, #tArgs do
            local flag = tArgs[i]
            if flag == &quot;--no_refuel&quot; then
                autoRefuel = false
                noRefuelFlagSet = true
            elseif flag == &quot;--left&quot; then
                lookingRight = false
                lookingLeftFlagSet = true
            elseif flag == &quot;--down&quot; then
                lookingUp = true
                lookingDownFlagSet = true
            end
        end
    end
end

Blah Blah Blah
   Blah De Blah
   Blah De Blah Blah
Blech!
```

While looking for interesting programs I found ACT by McLeopold. It is an application specific language (ASL) that uses one and two letter commands strung together to control the turtle. For example:

```
do Dff(?uDuu)48d48
```

chops down a tree and returns. 

It makes doing simple to moderately complex things easy. It reminded me of the APL and J programming languages. So I thought about all of the awesome things that could be done if ACT was a complete language and covered all of the abilities of minecraft turtles.

My first thought was to extend ACT but life has taught me that it is usually easier to start from scratch than to add on to someone else's work. Besides, learning how to write an interpreter would not only be cool but I could then make an ASL that would do whatever I wanted and I would understand how to extend it anytime. Awesome!

I am using &quot;Writing Compilers &amp; Interpreters An Applied Approach&quot; by Ronald Mac (ISBN 0-471-50968-X) as a text book. There are more current texts such as Holub's &quot;Compiler Design in C&quot; (ISBN 0-13-155045-4) but Mac is less theoretical and more introductory and I am not really a programmer. So I am working my way through Mac and writing he exercises in Lua. That way I learn interpreters and Lua at the same time. 

It is my intention to eventually use turtles for everything such as sorting items, moving items, keeping minimum number of items stocked, crafting, construction of buildings, terraforming, and of course, mining and digging.</content><author><name></name></author><summary type="html">The purpose of this blog is to keep notes and document my efforts to create something cool in Minecraft. Namely TURTLE WORLD DOMINATION!!! Insert evil laugh here. Seriously. It is an attempt to make minecraft turtles easier to use. They are already quite powerful but to use them you have to write scripts that look like this.</summary></entry></feed>